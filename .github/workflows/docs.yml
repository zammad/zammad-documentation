name: Documentation

# Controls when the workflow will run.
on:

  # Allow the workflow to be reusable.
  workflow_call:
    inputs:
      docs_path:
        description: Path to the documentation directory, relative to the repository root.
        required: false
        default: .
        type: string
      system_dependencies:
        description: Optional list of system dependencies to install via `apt` command, separated by spaces.
        required: false
        default: gettext
        type: string
      python_version:
        description: The version of Python binary to use.
        required: false
        default: '3.11'
        type: string
      requirements_path:
        description: Path to the `requirements.txt`, relative to the repository root.
        required: false
        default: requirements.txt
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Install System Dependencies
      shell: bash -eux {0}
      run: |
        sudo apt-get -q -y update
        sudo apt-get -q -y install ${{ inputs.system_dependencies }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install Python Dependencies
      shell: bash -eux {0}
      run: |
        python -m pip install --upgrade --no-cache-dir pip setuptools
        python -m pip install --upgrade --no-cache-dir sphinx
        python -m pip install --exists-action=w --no-cache-dir -r ${{ inputs.requirements_path }}

    - name: Check RST Syntax
      shell: bash -eux {0}
      run: |
        python -m pip install --upgrade --no-cache-dir 'rstcheck[sphinx]<=6.1.0'
        rstcheck --warn-unknown-settings --recursive .

    # Runs only on Pull Requests and if they contain changes.
    - name: Check for Outstanding Code Comments
      if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha != github.sha }}
      shell: bash -eux {0}
      env:
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        COMMENT_KEYWORD: ${{ format('{0}{1}{2}{3}', 'T', 'O', 'D', 'O') }} # HA!
      run: |
        COMMENTS=$(git diff $BASE_SHA... --color=always | perl -wlne 'print $1 if /^\e\[32m\+\e\[m\e\[32m(.*)\e\[m$/' | grep $COMMENT_KEYWORD || true)
        if [ -n "$COMMENTS" ]; then
          echo "::warning title=New $COMMENT_KEYWORD comments found!::Found $COMMENT_KEYWORD comments, please check if this was intentional or not..."
          echo "$COMMENTS"
        fi

    - name: Check Translation Sources
      shell: bash -eux {0}
      run: |
        if [[ -d "locale" ]]; then
          make gettext
          if git status --short | grep " M locale/"; then
            echo "::error title=Translation sources are out-of-date!::Please update translation sources with 'make gettext' command..."
            exit 1
          fi
        fi

    - name: Build Documentation
      shell: bash -eux {0}
      env:
        # NB: Disable failure on warnings when all translation issues are handled.
        fail_on_warning: # -W --keep-going
      run: |
        cd ${{ inputs.docs_path }}
        python -m sphinx -T -E $fail_on_warning -b html -d _build/doctrees -D language=en . _build/html
        python -m sphinx -T -E $fail_on_warning -b singlehtml -d _build/doctrees -D language=en . _build/htmlzip
        python -m sphinx -T -E $fail_on_warning -b epub -d _build/doctrees -D language=en . _build/epub

    - name: Compute short SHA
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Upload html Artifact
      uses: actions/upload-artifact@v3
      with:
        name: html-${{ steps.sha.outputs.sha_short }}
        path: ${{ inputs.docs_path }}/_build/html/

    - name: Upload htmlzip Artifact
      uses: actions/upload-artifact@v3
      with:
        name: htmlzip-${{ steps.sha.outputs.sha_short }}
        path: ${{ inputs.docs_path }}/_build/htmlzip/

    - name: Upload epub Artifact
      uses: actions/upload-artifact@v3
      with:
        name: epub-${{ steps.sha.outputs.sha_short }}
        path: ${{ inputs.docs_path }}/_build/epub/*.epub
